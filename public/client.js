class VibeMeWebRTC {
    constructor() {
        this.ws = null;
        this.localStream = null;
        this.audioContext = null;
        this.scriptProcessor = null;
        this.isCallActive = false;
        this.isConnected = false;
        this.currentAudio = null;
        this.isSpeaking = false;
        this.sessionId = null;

        // ÏùåÏÑ± ÌôúÎèô Í∞êÏßÄ ÏÑ§Ï†ï (Ïù∏ÌÑ∞ÎüΩÌä∏ Î∞©ÏßÄÎ•º ÏúÑÌï¥ Îçî ÏóÑÍ≤©ÌïòÍ≤å)
        this.voiceThreshold = 0.05; // ÏûÑÍ≥ÑÍ∞í Ï¶ùÍ∞Ä (0.02 -> 0.05)
        this.silenceThreshold = 0.005;
        this.voiceDetectionBuffer = [];
        this.bufferSize = 15; // ÏµúÍ∑º 15Í∞ú Ï≤≠ÌÅ¨Î°ú ÏùåÏÑ± ÌôúÎèô ÌåêÎã® (Îçî Í∏¥ ÌèâÍ∞Ä ÏãúÍ∞Ñ)
        this.consecutiveVoiceFrames = 0; // Ïó∞ÏÜç ÏùåÏÑ± ÌîÑÎ†àÏûÑ Ïπ¥Ïö¥ÌÑ∞
        this.minVoiceFrames = 5; // ÏµúÏÜå 5ÌîÑÎ†àÏûÑ Ïó∞ÏÜç ÏùåÏÑ±Ïù¥Ïñ¥Ïïº ÌôúÎèôÏúºÎ°ú Ïù∏Ï†ï (Îçî ÏóÑÍ≤©)

        this.init();
    }

    init() {
        this.setupWebSocket();
        this.setupEventListeners();
        this.initWelcomeTime();
        this.updateStatus('Ïó∞Í≤∞ Ï§ë...', 'connecting');
    }

    initWelcomeTime() {
        const welcomeTime = document.getElementById('welcomeTime');
        if (welcomeTime) {
            welcomeTime.textContent = this.formatTime(new Date());
        }
    }

    setupWebSocket() {
        const protocol = window.location.protocol === 'https:' ? 'wss:' : 'ws:';
        const wsUrl = `${protocol}//${window.location.host}`;

        this.ws = new WebSocket(wsUrl);

        this.ws.onopen = () => {
            console.log('WebSocket connected');
            this.isConnected = true;
            this.updateStatus('Ïó∞Í≤∞Îê® - ÌÜµÌôî ÏãúÏûë Í∞ÄÎä•', 'connected');
        };

        this.ws.onmessage = (event) => {
            try {
                const data = JSON.parse(event.data);
                this.handleWebSocketMessage(data);
            } catch (error) {
                console.error('WebSocket message parsing error:', error);
            }
        };

        this.ws.onclose = () => {
            console.log('WebSocket disconnected');
            this.isConnected = false;
            this.updateStatus('Ïó∞Í≤∞ ÎÅäÍπÄ - Ïû¨Ïó∞Í≤∞ Ï§ë...', 'disconnected');
            setTimeout(() => this.setupWebSocket(), 3000);
        };

        this.ws.onerror = (error) => {
            console.error('WebSocket error:', error);
            this.updateStatus('Ïó∞Í≤∞ Ïò§Î•ò', 'disconnected');
        };
    }

    setupEventListeners() {
        const callButton = document.getElementById('callButton');
        const endCallButton = document.getElementById('endCallButton');

        callButton.addEventListener('click', () => this.startCall());
        endCallButton.addEventListener('click', () => this.endCall());
    }

    async handleWebSocketMessage(data) {
        switch (data.type) {
            case 'call-ready':
                console.log('Call ready, session:', data.sessionId);
                this.sessionId = data.sessionId;
                break;

            case 'audio-response':
                await this.playAIResponse(data.audioData);
                break;

            case 'conversation':
                this.addConversationToLog(data.user, data.assistant, data.timestamp);
                break;

            default:
                console.log('Unknown message type:', data.type);
        }
    }

    async startCall() {
        try {
            this.updateStatus('ÎßàÏù¥ÌÅ¨ Ï†ëÍ∑º Í∂åÌïú ÏöîÏ≤≠ Ï§ë...', 'connecting');

            // Í≥†ÌíàÏßà ÎßàÏù¥ÌÅ¨ ÏÑ§Ï†ï
            this.localStream = await navigator.mediaDevices.getUserMedia({
                audio: {
                    echoCancellation: true,
                    noiseSuppression: true,
                    autoGainControl: true,
                    sampleRate: 16000,
                    channelCount: 1
                }
            });

            console.log('Microphone access granted');

            // Web Audio API ÏÑ§Ï†ï
            this.audioContext = new (window.AudioContext || window.webkitAudioContext)({
                sampleRate: 16000
            });

            const source = this.audioContext.createMediaStreamSource(this.localStream);

            // WebRTC Î∞©Ïãù: ScriptProcessorÎ°ú Ïã§ÏãúÍ∞Ñ Ïò§ÎîîÏò§ Ï∫°Ï≤ò
            this.scriptProcessor = this.audioContext.createScriptProcessor(4096, 1, 1);

            let audioBuffer = [];
            let lastSendTime = Date.now();

            this.scriptProcessor.onaudioprocess = (event) => {
                if (!this.isCallActive) return;

                const inputData = event.inputBuffer.getChannelData(0);
                const now = Date.now();

                // Ïã§ÏãúÍ∞Ñ ÏùåÏÑ± ÌôúÎèô Í∞êÏßÄ
                const voiceActivity = this.detectAdvancedVoiceActivity(inputData);

                // ÏÇ¨Ïö©ÏûêÍ∞Ä ÎßêÌïòÍ∏∞ ÏãúÏûëÌïòÎ©¥ TTS Ï§ëÎã®
                if (voiceActivity && !this.isSpeaking) {
                    this.isSpeaking = true;
                    this.stopCurrentAudio();
                    this.sendStopTTSSignal();
                    console.log('üé§ User started speaking - TTS interrupted');
                } else if (!voiceActivity && this.isSpeaking) {
                    this.isSpeaking = false;
                    console.log('üîá User stopped speaking');
                }

                // 16-bit PCMÏúºÎ°ú Î≥ÄÌôò
                const audioData = this.convertFloat32ToInt16(inputData);
                audioBuffer.push(...audioData);

                // 250msÎßàÎã§ Ï†ÑÏÜ°
                if (now - lastSendTime > 250) {
                    if (audioBuffer.length > 0) {
                        this.sendAudioStream(audioBuffer);
                        audioBuffer = [];
                        lastSendTime = now;
                    }
                }
            };

            source.connect(this.scriptProcessor);
            this.scriptProcessor.connect(this.audioContext.destination);

            // ÌÜµÌôî ÏãúÏûë
            this.isCallActive = true;
            this.updateCallButtons(true);
            this.updateStatus('üìû Ïã§ÏãúÍ∞Ñ ÏùåÏÑ± ÎåÄÌôî Ï§ë...', 'calling');

            // ÏÑúÎ≤ÑÏóê ÌÜµÌôî ÏãúÏûë ÏïåÎ¶º
            this.ws.send(JSON.stringify({
                type: 'start-call'
            }));

            console.log('WebRTC real-time voice call started');

        } catch (error) {
            console.error('Failed to start call:', error);
            this.updateStatus('ÎßàÏù¥ÌÅ¨ Ï†ëÍ∑º Ïã§Ìå®', 'disconnected');
        }
    }

    endCall() {
        console.log('üìû Ending call - stopping all audio and processing');

        this.isCallActive = false;
        this.isSpeaking = false;

        // ÌòÑÏû¨ Ïû¨ÏÉù Ï§ëÏù∏ TTS Í∞ïÏ†ú Ï§ëÎã®
        this.stopCurrentAudio();

        // ÏÑúÎ≤ÑÏóê TTS Ï§ëÎã® Ïã†Ìò∏ Ï†ÑÏÜ°
        this.sendStopTTSSignal();

        // Ïò§ÎîîÏò§ Ïä§Ìä∏Î¶º Ï†ïÎ¶¨
        if (this.localStream) {
            this.localStream.getTracks().forEach(track => track.stop());
            this.localStream = null;
        }

        // Web Audio API Ï†ïÎ¶¨
        if (this.scriptProcessor) {
            this.scriptProcessor.disconnect();
            this.scriptProcessor = null;
        }

        if (this.audioContext) {
            this.audioContext.close();
            this.audioContext = null;
        }

        // ÏÑúÎ≤ÑÏóê ÌÜµÌôî Ï¢ÖÎ£å ÏïåÎ¶º
        if (this.ws && this.isConnected) {
            this.ws.send(JSON.stringify({
                type: 'end-call'
            }));
        }

        this.updateCallButtons(false);
        this.updateStatus('ÌÜµÌôî Ï¢ÖÎ£åÎê®', 'connected');

        console.log('Call ended');
    }

    sendAudioStream(audioData) {
        if (this.ws && this.isConnected && this.isCallActive) {
            try {
                this.ws.send(JSON.stringify({
                    type: 'audio-stream',
                    audioData: Array.from(audioData)
                }));
            } catch (error) {
                console.error('Failed to send audio stream:', error);
            }
        }
    }

    sendStopTTSSignal() {
        if (this.ws && this.isConnected) {
            this.ws.send(JSON.stringify({
                type: 'stop-tts',
                sessionId: this.sessionId
            }));
        }
    }

    convertFloat32ToInt16(float32Array) {
        const int16Array = new Int16Array(float32Array.length);
        for (let i = 0; i < float32Array.length; i++) {
            const s = Math.max(-1, Math.min(1, float32Array[i]));
            int16Array[i] = s < 0 ? s * 0x8000 : s * 0x7FFF;
        }
        return int16Array;
    }

    // Í≥†Í∏â ÏùåÏÑ± ÌôúÎèô Í∞êÏßÄ (Îçî ÏóÑÍ≤©Ìïú Í∏∞Ï§Ä)
    detectAdvancedVoiceActivity(audioData) {
        // RMS Í≥ÑÏÇ∞
        let sum = 0;
        for (let i = 0; i < audioData.length; i++) {
            sum += audioData[i] * audioData[i];
        }
        const rms = Math.sqrt(sum / audioData.length);

        // Î≤ÑÌçºÏóê Ï∂îÍ∞Ä
        this.voiceDetectionBuffer.push(rms);
        if (this.voiceDetectionBuffer.length > this.bufferSize) {
            this.voiceDetectionBuffer.shift();
        }

        // ÌòÑÏû¨ ÌîÑÎ†àÏûÑÏù¥ ÏûÑÍ≥ÑÍ∞íÏùÑ ÎÑòÎäîÏßÄ ÌôïÏù∏
        const currentFrameHasVoice = rms > this.voiceThreshold;

        // Ïó∞ÏÜç ÏùåÏÑ± ÌîÑÎ†àÏûÑ Ïπ¥Ïö¥ÌÑ∞ ÏóÖÎç∞Ïù¥Ìä∏
        if (currentFrameHasVoice) {
            this.consecutiveVoiceFrames++;
        } else {
            this.consecutiveVoiceFrames = 0;
        }

        // ÌèâÍ∑† RMS Í≥ÑÏÇ∞ (Ï∂îÍ∞Ä Í≤ÄÏ¶ùÏö©)
        const avgRMS = this.voiceDetectionBuffer.reduce((a, b) => a + b, 0) / this.voiceDetectionBuffer.length;

        // Ìõ®Ïî¨ Îçî ÏóÑÍ≤©Ìïú ÏùåÏÑ± ÌôúÎèô ÌåêÎã® (Ïù∏ÌÑ∞ÎüΩÌä∏ Î∞©ÏßÄ)
        // 1. Ïó∞ÏÜçÏúºÎ°ú minVoiceFrames Ïù¥ÏÉÅ ÏùåÏÑ±Ïù¥ Í∞êÏßÄÎêòÏñ¥Ïïº Ìï®
        // 2. ÌèâÍ∑† RMSÎèÑ ÏûÑÍ≥ÑÍ∞í Ïù¥ÏÉÅÏù¥Ïñ¥Ïïº Ìï®
        // 3. ÌòÑÏû¨ RMSÍ∞Ä ÎÜíÏùÄ ÏûÑÍ≥ÑÍ∞íÏùÑ ÎÑòÏñ¥Ïïº Ìï®
        const hasConsistentVoice = this.consecutiveVoiceFrames >= this.minVoiceFrames;
        const hasStrongSignal = avgRMS > this.voiceThreshold * 0.9; // ÌèâÍ∑† ÏûÑÍ≥ÑÍ∞íÏùÑ Îçî ÏóÑÍ≤©ÌïòÍ≤å
        const hasHighCurrentSignal = rms > this.voiceThreshold * 1.2; // ÌòÑÏû¨Í∞íÎèÑ ÎÜíÏïÑÏïº Ìï®

        return hasConsistentVoice && hasStrongSignal && hasHighCurrentSignal;
    }

    // ÌòÑÏû¨ Ïû¨ÏÉù Ï§ëÏù∏ Ïò§ÎîîÏò§ Ï§ëÎã®
    stopCurrentAudio() {
        if (this.currentAudio) {
            this.currentAudio.pause();
            this.currentAudio.currentTime = 0;
            this.currentAudio = null;
            console.log('üîá TTS audio stopped');
            
            // Î¶ΩÏã±ÌÅ¨ÎèÑ Ï§ëÏßÄ
            if (window.characterManager) {
                window.characterManager.onAIStopSpeaking();
            }
        }
    }

    async playAIResponse(audioBase64) {
        try {
            // ÌÜµÌôîÍ∞Ä Ï¢ÖÎ£åÎêòÏóàÏúºÎ©¥ Ïû¨ÏÉùÌïòÏßÄ ÏïäÏùå
            if (!this.isCallActive) {
                console.log('Call ended, skipping TTS playback');
                return;
            }

            // ÏÇ¨Ïö©ÏûêÍ∞Ä ÎßêÌïòÍ≥† ÏûàÏúºÎ©¥ Ïû¨ÏÉùÌïòÏßÄ ÏïäÏùå
            if (this.isSpeaking) {
                console.log('User is speaking, skipping TTS playback');
                return;
            }

            // Ïù¥Ï†Ñ Ïò§ÎîîÏò§Í∞Ä Ïû¨ÏÉù Ï§ëÏù¥Î©¥ Ï§ëÎã®
            this.stopCurrentAudio();

            // Ï∫êÎ¶≠ÌÑ∞ Î¶ΩÏã±ÌÅ¨ ÏãúÏûë
            if (window.characterManager) {
                window.characterManager.onAIStartSpeaking();
            }

            // Base64Î•º BlobÏúºÎ°ú Î≥ÄÌôò
            const audioData = atob(audioBase64);
            const audioArray = new Uint8Array(audioData.length);
            for (let i = 0; i < audioData.length; i++) {
                audioArray[i] = audioData.charCodeAt(i);
            }

            const audioBlob = new Blob([audioArray], { type: 'audio/mp3' });
            const audioUrl = URL.createObjectURL(audioBlob);

            // Ïò§ÎîîÏò§ Ïû¨ÏÉù
            const audio = new Audio(audioUrl);
            this.currentAudio = audio;

            // Ïò§ÎîîÏò§ Î∂ÑÏÑùÏùÑ ÏúÑÌïú Web Audio API ÏÑ§Ï†ï
            this.setupAudioAnalyzer(audio);

            audio.addEventListener('loadeddata', () => {
                console.log('üîä AI response audio loaded, playing...');
            });

            audio.addEventListener('ended', () => {
                URL.revokeObjectURL(audioUrl);
                this.currentAudio = null;
                console.log('üéµ AI response playback finished');
                
                // Ï∫êÎ¶≠ÌÑ∞ Î¶ΩÏã±ÌÅ¨ Ï§ëÏßÄ
                if (window.characterManager) {
                    window.characterManager.onAIStopSpeaking();
                }
            });

            audio.addEventListener('error', (error) => {
                console.error('AI response playback error:', error);
                URL.revokeObjectURL(audioUrl);
                this.currentAudio = null;
                
                // Ïò§Î•ò ÏãúÏóêÎèÑ Î¶ΩÏã±ÌÅ¨ Ï§ëÏßÄ
                if (window.characterManager) {
                    window.characterManager.onAIStopSpeaking();
                }
            });

            // ÏÇ¨Ïö©ÏûêÍ∞Ä ÎßêÌïòÍ±∞ÎÇò ÌÜµÌôîÍ∞Ä Ï¢ÖÎ£åÎêòÎ©¥ Ïû¨ÏÉù Ï§ëÎã®ÌïòÎèÑÎ°ù Ïù¥Î≤§Ìä∏ Î¶¨Ïä§ÎÑà Ï∂îÍ∞Ä
            const checkInterruption = () => {
                if ((this.isSpeaking || !this.isCallActive) && this.currentAudio === audio) {
                    console.log('üõë TTS interrupted:', this.isSpeaking ? 'user speaking' : 'call ended');
                    this.stopCurrentAudio();
                }
            };

            audio.addEventListener('timeupdate', checkInterruption);

            await audio.play();

        } catch (error) {
            console.error('Failed to play AI response:', error);
        }
    }

    addConversationToLog(userText, assistantText, timestamp) {
        // ÏÇ¨Ïö©Ïûê Î©îÏãúÏßÄ
        this.addMessage(userText, 'user', timestamp);

        // AI ÏùëÎãµ
        this.addMessage(assistantText, 'bot', timestamp);
    }

    addMessage(text, sender, timestamp = null) {
        const chatContainer = document.getElementById('chatContainer');
        const messageDiv = document.createElement('div');
        messageDiv.className = `message ${sender}`;

        const contentDiv = document.createElement('div');
        contentDiv.className = 'message-content';
        contentDiv.textContent = text;

        const timeDiv = document.createElement('div');
        timeDiv.className = 'message-time';
        timeDiv.textContent = this.formatTime(timestamp ? new Date(timestamp) : new Date());

        messageDiv.appendChild(contentDiv);
        messageDiv.appendChild(timeDiv);
        chatContainer.appendChild(messageDiv);
        chatContainer.scrollTop = chatContainer.scrollHeight;
    }

    formatTime(date) {
        return date.toLocaleTimeString('ko-KR', {
            hour: '2-digit',
            minute: '2-digit',
            second: '2-digit',
            hour12: true
        });
    }

    updateStatus(text, className) {
        const statusElement = document.getElementById('status');
        statusElement.textContent = text;
        statusElement.className = `status ${className}`;
    }

    updateCallButtons(inCall) {
        const callButton = document.getElementById('callButton');
        const endCallButton = document.getElementById('endCallButton');

        callButton.style.display = inCall ? 'none' : 'inline-block';
        endCallButton.style.display = inCall ? 'inline-block' : 'none';
    }

    // Ïò§ÎîîÏò§ Î∂ÑÏÑùÍ∏∞ ÏÑ§Ï†ï (Î¶ΩÏã±ÌÅ¨Ïö©) - AnalyserNode ÏÇ¨Ïö©
    setupAudioAnalyzer(audio) {
        try {
            if (!window.characterManager) return;

            // Ïò§ÎîîÏò§ Ïª®ÌÖçÏä§Ìä∏ ÏÉùÏÑ±
            if (!this.analyzerAudioContext) {
                this.analyzerAudioContext = new (window.AudioContext || window.webkitAudioContext)();
            }

            const source = this.analyzerAudioContext.createMediaElementSource(audio);
            const analyzer = this.analyzerAudioContext.createAnalyser();
            
            analyzer.fftSize = 512;
            analyzer.smoothingTimeConstant = 0.8;
            const dataArray = new Uint8Array(analyzer.frequencyBinCount);

            source.connect(analyzer);
            analyzer.connect(this.analyzerAudioContext.destination);

            // Ïã§ÏãúÍ∞Ñ Ïò§ÎîîÏò§ Î∂ÑÏÑù
            const analyzeAudio = () => {
                if (this.currentAudio === audio && !audio.paused && !audio.ended) {
                    analyzer.getByteFrequencyData(dataArray);
                    
                    // ÏùåÏÑ± Ï£ºÌååÏàò ÎåÄÏó≠ÏóêÏÑú ÌèâÍ∑† ÏùåÎüâ Í≥ÑÏÇ∞
                    let sum = 0;
                    const startFreq = 10; // ~200Hz
                    const endFreq = 100;   // ~2000Hz
                    
                    for (let i = startFreq; i < endFreq; i++) {
                        sum += dataArray[i];
                    }
                    
                    const average = sum / (endFreq - startFreq);
                    const normalizedValue = average / 255.0;
                    
                    // Î¶ΩÏã±ÌÅ¨ ÏóÖÎç∞Ïù¥Ìä∏
                    if (window.characterManager) {
                        window.characterManager.updateLipSyncFromAudio([normalizedValue]);
                    }
                    
                    requestAnimationFrame(analyzeAudio);
                }
            };

            // Ïò§ÎîîÏò§ Ïû¨ÏÉù ÏãúÏûëÏãú Î∂ÑÏÑù ÏãúÏûë
            audio.addEventListener('play', () => {
                if (this.analyzerAudioContext.state === 'suspended') {
                    this.analyzerAudioContext.resume();
                }
                analyzeAudio();
            });

        } catch (error) {
            console.error('Failed to setup audio analyzer:', error);
        }
    }
}

document.addEventListener('DOMContentLoaded', () => {
    new VibeMeWebRTC();
});
